// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`minify-css-in-helpers.ts 1`] = `

File: minify-css-in-helpers.ts
Source code:

  declare const keyframes: any;
  declare const css: any;
  declare const createGlobalStyle: any;
  
  declare const theColor: any;
  
  const key = keyframes\`
    to {
      transform: rotate(360deg);
    }
  \`;
  
  const color = css\`
    color: \${theColor};
  \`;
  
  const MyRedBody = createGlobalStyle\`
    body {
      background-color: red; // comments
      \${color} // comments
      // it will be ignored, but still emitted \${color}
    }
  \`;
  
  export {};
  

TypeScript before transform:

  declare const keyframes: any;
  declare const css: any;
  declare const createGlobalStyle: any;
  declare const theColor: any;
  const key = keyframes \`
    to {
      transform: rotate(360deg);
    }
  \`;
  const color = css \`
    color: \${theColor};
  \`;
  const MyRedBody = createGlobalStyle \`
    body {
      background-color: red; // comments
      \${color} // comments
      // it will be ignored, but still emitted \${color}
    }
  \`;
  export {};
  

TypeScript after transform:

  declare const keyframes: any;
  declare const css: any;
  declare const createGlobalStyle: any;
  declare const theColor: any;
  const key = keyframes \`to{transform:rotate(360deg);}\`;
  const color = css \`color:\${theColor};\`;
  const MyRedBody = createGlobalStyle \`body{background-color:red;\${color}//\${color}
  }\`;
  export {};
  

TypeScript after transpile module:

  const key = keyframes \`to{transform:rotate(360deg);}\`;
  const color = css \`color:\${theColor};\`;
  const MyRedBody = createGlobalStyle \`body{background-color:red;\${color}//\${color}
  }\`;
  export {};
  


`;
